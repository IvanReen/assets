Windows：

核心在于collect()方法！
该方法首先通过platform模块获取平台的信息，然后保存到一个data字典中。
然后创建一个Win32Info对象，并调用win32的各种功能方法，分别获取CPU、RAM、主板、硬盘和网卡的信息。
类Win32Info是我们编写的封装了具体数据收集逻辑的类；
该类中有很多方法，每个方法针对一项数据；
其中对Win32模块的调用方式是固定的，有兴趣的可以自行学习这个模块的官方文档
每一类的数据收集完成后都会作为一个新的子字典，update到开始的data字典中，最终形成完整的信息字典。
最后在脚本末尾有一个测试入口。

整个脚本的代码其实很简单，我们只要将Win32的方法调用当作透明的空气，剩下的不过就是将获得的数据，按照我们指定的格式打包成一个数据字典。
强调：数据字典的格式和键值是非常重要的，是预设的，不可以随意改变！


Linux：
使用subprocess.Popen()方法执行Linux的命令，然后获取返回值，并以规定的格式打包到data字典里。

需要说明的问题有：

当Linux中存在好几个Python解释器版本时，要注意调用方式，前面已经强调过了；
不同的Linux发行版，有些命令可能没有，需要额外安装；
所使用的查看硬件信息的命令并不一定必须和这里的一样，只要能获得数据就行；
有一些命令在ubuntu中涉及sudo的问题，需要特别对待；
最终数据字典的格式一定要正确。
可以在Linux下配置cronb或其它定时服务，设置定期的数据收集、报告任务。
